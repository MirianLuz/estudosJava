O contêiner de Spring é responsável pela instanciação, configuração e montagem dos objetos conhecidos como beans. Ele age como um repositório central de objetos que são gerenciados pelo Spring. O contêiner utiliza o conceito de Inversão de Controle (IoC), o que significa que ele controla o ciclo de vida e as dependências dos objetos. O contêiner também oferece suporte para injeção de dependência (DI), permitindo que objetos sejam fornecidos automaticamente pelo framework.

Existem duas implementações principais do contêiner: o BeanFactory e o ApplicationContext. A BeanFactory é a versão mais básica e leve, sendo usada principalmente para contêineres leves, enquanto o ApplicationContext oferece funcionalidades mais avançadas, como suporte a eventos, internacionalização e integração com recursos de contexto web. A escolha entre uma implementação e outra depende da complexidade da aplicação.

Exemplos práticos:

Quando uma aplicação precisa gerenciar o ciclo de vida de objetos complexos, o contêiner do Spring facilita a injeção de dependência, evitando a necessidade de criar instâncias manualmente.
Em aplicações empresariais, é comum usar o ApplicationContext para lidar com múltiplos serviços que precisam ser configurados e gerenciados centralmente.
Principais tópicos:

Contêiner de Spring: Gerencia os beans da aplicação.
Inversão de Controle (IoC): O contêiner controla o ciclo de vida dos objetos.
Injeção de Dependência (DI): Automatiza o fornecimento de dependências.
BeanFactory: Implementação básica do contêiner.
ApplicationContext: Implementação avançada com mais funcionalidades.
Exemplo em Java:

Este exemplo ilustra a criação e uso de um bean com injeção de dependência usando o ApplicationContext.

java

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
    public static void main(String[] args) {
        // Carrega o ApplicationContext a partir de um arquivo de configuração XML
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");

        // Obtém o bean 'myService' gerenciado pelo Spring
        MyService myService = context.getBean(MyService.class);
        
        // Usa o bean
        myService.performAction();
    }
}

class MyService {
    public void performAction() {
        System.out.println("Ação executada!");
    }
}

Neste exemplo, o Spring gerencia o bean MyService e injeta suas dependências automaticamente. O ApplicationContext carrega as definições de beans do arquivo beans.xml.
