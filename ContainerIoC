O container IoC do Spring gerencia um ou mais beans, que são objetos configurados através de metadados fornecidos ao contêiner, como definições de XML. As definições de beans contêm informações sobre a classe, escopo, ciclo de vida e dependências necessárias. As dependências de outros beans são chamadas de colaboradores ou dependências. Além disso, as implementações de ApplicationContext permitem o registro de objetos existentes criados fora do contêiner, mas isso deve ser feito o mais cedo possível para evitar problemas com autowiring.

O ApplicationContext oferece suporte para substituir beans, mas essa prática será descontinuada em futuras versões. Para evitar a substituição de beans, o parâmetro allowBeanDefinitionOverriding pode ser configurado como false. Também é possível nomear os beans com identificadores únicos, que podem ser usados diretamente ou com aliases, permitindo uma melhor organização de configurações em sistemas maiores.

Exemplos práticos:

Um bean pode ser instanciado de várias formas: usando um construtor padrão, um método de fábrica estático ou um método de fábrica de instância.
Beans podem ser configurados diretamente via XML ou com Java Configuration usando a anotação @Bean.
Para sistemas maiores, o uso de aliases permite que subsistemas usem diferentes nomes para se referir ao mesmo bean, garantindo consistência e evitando colisões de nomes.
Principais tópicos:

Container IoC: Gerencia o ciclo de vida e as dependências dos beans.
Bean Definitions: Definições de beans contêm informações como classe, escopo e dependências.
Autowiring: Automatiza a injeção de dependências entre os beans.
ApplicationContext: Suporte avançado para gerenciamento de beans.
Injeção de Dependência: Feita através de construtores ou métodos de fábrica.
Aliases de Beans: Permitem múltiplos nomes para um mesmo bean, úteis em configurações de sistemas complexos.
Exemplo em Java:

Este exemplo ilustra a criação de um bean usando um método de fábrica estático:

java
Copiar código
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml");

        // Obtém o bean 'clientService' criado através do método de fábrica estático
        ClientService clientService = context.getBean(ClientService.class);
        clientService.executeService();
    }
}

class ClientService {
    private static ClientService instance = new ClientService();

    private ClientService() {}

    public static ClientService createInstance() {
        return instance;
    }

    public void executeService() {
        System.out.println("Serviço executado!");
    }
}
No exemplo, o método de fábrica estático createInstance cria e gerencia o bean ClientService. O Spring utiliza essa definição para instanciar o objeto.
